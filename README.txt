Предусловие: на тестовой машине должени стоять python 3.6+

1. Скопировать папку проекта на локальный диск или форкнуть репозиторий
2. Установить виртуальную среду в папке проекта, выполнив в командной строке $: python3 -m env venv
2. Активировать виртуальную среду в папке проекта: $: source venv/bin/activate
3. Выполнить установку зависимостей $: pip install -r requirements.txt
4. Для запуска тестов $: python3 test_cmc_requests.py

Если все тесты завершаются ошибками Skipped, то сайт https://coinmarketcap.com/ недоступен или  используется
недействительный ключ API .
В этом случае:
1. Проверить соединение
2. Если соединение в порядке, зарегестрироваться на сайте https://coinmarketcap.com/api/ , получить ключ API
3. Присвоить значение ключа константе API_KEY. (Значение должно быть заключено в кавычки)

Опционально:
1. Для для получения большего количества деталей тестирования выполнить: pytest -v test_cmc_requests.py
2. Для проведения тестов с GUI в папке с проектом выполнить $: cricket-unnittest



Задание:

Написать 2 теста для API сайта coinmarketcap.com.

1. Получить данные о 10 тикерах с наибольшим объемом за последние 24 часа.
ВЫПОЛНЕНО: cmc_requrst.py

Считать, что тест выполнился успешно, если:

* успешный ответ от ресурса приходит менее чем за 500мс;

* информация по каждой валюте актуальна (т.е. берется за текущий день);

* размер полученного пакета данных не должен превышать 10кб;
ВЫПОЛНЕНО: test_cmc_requests.py, class TestCmcSingleRequest


2. Запустить тест №1 параллельно/асинхронно 8 раз и рассчитать rps (скорость ответов от сервера в секунду) и 80-перцентиль времени ответа сервера (80% la$

ВЫПОЛНЕНО: В фикстуре cmc_multirequess_fixture

Считать, что тест выполнился успешно, если:

* все запущенные тесты выполнились успешно;

* rps > 5;

* 80% latency < 450мс;

ВЫПОЛНЕНО: тест TestCmcMultiRequest

Можно использовать любые языки программирования, любые фреймворки и библиотеки.
Результат должен быть снабжен инструкцией по запуску теста.
Оцениваются: уровень знания инструментов или способность быстро их освоить, точность выполнения задания, базовые навыки
разработки.

Все выполнение заняло порядка 14 часов:
 - 1 час: освоение API по тех документации
 - 3 часа суммарно: на написание кода
 - 1 час: разобраться фикстурами unittest
 - 2 часа: приведение вывода в соответствии с заданием
 - 7 часов: рефакторинг, написание комментариев на английском и русском

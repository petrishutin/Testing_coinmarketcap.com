Пердусловие: на тестовой машине должени стоять python 3.6+

1. Скопировать папку проекта на локальный диск или форкнуть репозиторий
2. Установить виртуальную среду в папке проекта, выполнив в командной строке $: python3 -m env venv
2. Активировать виртуальную среду в папке проекта: $: source venv/bin/activate
3. Выполнить установку зависимостей $: pip install -r requirements.txt
4. Выполнить в командной строке $: python3 test_cmc_requests.py

Установка текущей даты
1. Открыть файл settings.py в папке проекта
2. Установить значение константы UTC_OFFSET в соответствии с текущем часовым поясом (+3 для Москвы)

Если тесты завершаются ошибками Skiped: 'Invalid Api-key', то используется недействительный ключ API.
В этом случае:
1. Зарегестрироваться на сайте https://coinmarketcap.com/api/ получить ключ API
    (можно я не буду расписывать как зарегестироваться на сайте?)
2. Открыть файл settings.py в папке проекта
3. Присвоить значение ключа константе API_KEY. (Значение должно быть заключено в кавычки)

Опционально:
Можно использовать cricket-unnittest для проведения тестов
Для этого в папке с проектом исполнить $: cricket-unnittest



Задание:

Написать 2 теста для API сайта coinmarketcap.com.

1. Получить данные о 10 тикерах с наибольшим объемом за последние 24 часа.
ВЫПОЛНЕНО: cmc_requrst.py

Считать, что тест выполнился успешно, если:

* успешный ответ от ресурса приходит менее чем за 500мс;

* информация по каждой валюте актуальна (т.е. берется за текущий день);

* размер полученного пакета данных не должен превышать 10кб;
ВЫПОЛНЕНО: test_cmc_request.py


2. Запустить тест №1 параллельно/асинхронно 8 раз и рассчитать rps (скорость ответов от сервера в секунду) и 80-перцентиль времени ответа сервера (80% la$

ВЫПОЛНЕНО: cmc_multirequest.py (Параллельный запуск потокой выполнен в отдельном модуле формально не являющимся тестом

Считать, что тест выполнился успешно, если:

* все запущенные тесты выполнились успешно;

* rps > 5;

* 80% latency < 450мс;

ВЫПОЛНЕНО: test_cmc_multirequest.py

Можно использовать любые языки программирования, любые фреймворки и библиотеки.
Результат должен быть снабжен инструкцией по запуску теста.
Оцениваются: уровень знания инструментов или способность быстро их освоить, точность выполнения задания, базовые навыки
разработки.

Все выполнение заняло порядка 12-14 часов:
 - 1 час освоение API по тех документации
 - 4 сумарно часа на написание кода
 - 1 час разобраться фикстурами unittest
 - 2 часов приведение вывода в соответствии с заданием
 - 4-6 рефакторинг написание коментариев на английском и русском

TODO сейчас тесты 1 и 2 полностью независимы и в тесте 2 полностью повторяется функциональнось теста 1, только
проверяется итоговый отчет по работе несколких потоков.
Для более полного соотвтствия заданию необходимо выполнять тест 1 в фикстуре для тест 2 в каждом потоке